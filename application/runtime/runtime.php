<?php  namespace base; class loader { static $_instance = array(); public static function init($class, $callback = '', $param_arr = array()) { return self::initialize($class, $callback, (array) $param_arr); } static $classes = array( 'tool' => '\base\tool', 'model' => '\base\model', 'config' => '\base\config', 'router' => '\base\router', 'view' => '\base\view', 'language' => '\base\language', 'cache' => '\base\cache', 'runtime' => '\base\runtime', 'session' => '\base\session', 'url' => '\base\url', 'log' => '\base\log', 'db' => '\base\db', 'cookie' => '\tool\cookie' ); private static function initialize($class, $callback = '', $param_arr = array()) { $substr = substr($class, 0, 2); switch (strtolower($substr)) { case 'b_': return self::initialize('\\base\\' . substr($class, 2), $callback, $param_arr); case 'm_': return self::initialize('\\model\\' . substr($class, 2), 'init', array(substr($class, 2)))? : self::initialize('\\base\\model')->init(substr($class, 2)); case 'c_': return self::initialize('\\controller\\' . substr($class, 2), $callback, $param_arr); case 't_': return self::initialize('\\tool\\' . substr($class, 2), $callback, $param_arr); case 'd_': return self::initialize('\\driver\\' . substr($class, 2), $callback, $param_arr); case 'l_': return self::initialize('\\libraries\\' . substr($class, 2), $callback, $param_arr); case 'p_': return self::initialize('\\plugin\\' . substr($class, 2), $callback, $param_arr); default: $class = isset(self::$classes[$class]) ? self::$classes[$class] : $class; } if (!isset(self::$_instance[$class])) { if (class_exists($class)) { $x = new $class(); if (!empty($callback) && is_callable($class, $callback)) { self::$_instance[$class] = call_user_func_array(array($x, $callback), (array) $param_arr); } else { self::$_instance[$class] = $x; } } else { return FALSE; } } return self::$_instance[$class]; } public static function autoload($class) { $name = trim(str_replace('\\', DS, $class), '\\/') . CLASS_SUFFIX; $x = substr($name, 0, stripos($name, DS)); if (in_array($x, array('base', 'tool', 'driver'))) { $filename = rtrim(FEROS_PATH, '\\/') . DIRECTORY_SEPARATOR . $name; if (is_file($filename)) { require_once $filename; return true; } } elseif (in_array($x, array('controller', 'model'))) { $filename = rtrim(APP_PATH, '\\/') . DIRECTORY_SEPARATOR . $name; if (is_file($filename)) { require_once $filename; return true; } } else { $filename = rtrim(APP_PATH, '\\/') . DIRECTORY_SEPARATOR . 'libraries' . $name; if (is_file($filename)) { require_once $filename; return true; } } } } namespace base; class common { public function __get($name) { return loader::init($name); } public function __isset($name) { } public function __unset($name) { } } namespace base; class feros { static public $bug = FALSE, $config = FALSE, $runtime = FALSE; public static function run() { self::init(); \base\loader::init('router')->init(); } public static function run_time($end = null, $dec = 4) { return number_format((($end? : microtime(TRUE)) - FEROS_BEGIN_TIME), $dec); } public static function run_memory($end = null) { return FEROS_BEGIN_MEMORY ? number_format((($end? : memory_get_usage()) - FEROS_BEGIN_MEMORY)) : NULL; } private static function init() { mb_internal_encoding(FEROS_ENCODING); self::$bug ? error_reporting(E_ALL) : error_reporting(0); spl_autoload_register('\base\loader::autoload'); register_shutdown_function('\base\handler::shutdown'); set_exception_handler('\base\handler::exception'); set_error_handler('\base\handler::error'); date_default_timezone_set(\base\loader::init('config')->global->timezone? : 'PRC'); } public static function bug($bool = TRUE) { self::$bug = $bool; } public static function rep_config($bool = TRUE) { self::$config = $bool; } public static function rep_runtime($bool = TRUE) { self::$runtime = $bool; } } namespace base; class handler { public static function error($errno, $errstr, $file, $line) { $error = "[{$errno}] {$errstr} " . $file . " 第 {$line} 行."; switch ($errno) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: loader::init('log', 'error', $error); break; default: loader::init('log', 'notic', $error); break; } } public static function exception($e) { $message = $e->getMessage(); $trace = $e->getTrace(); if ('E' == $trace[0]['function']) { $file = $trace[0]['file']; $line = $trace[0]['line']; } else { $file = $e->getFile(); $line = $e->getLine(); } loader::init('log', 'error', "{$message} {$file} 第 {$line} 行."); loader::init('view')->assign('message', \feros::$bug ? $message : '服务器错误，请查看错误日志'); loader::init('view')->set_template_path(rtrim(FEROS_PATH, '\\/') . DS . 'view')->display('500'); } public static function shutdown() { if (feros::$config) { loader::init('t_file')->delete(loader::init('config')->run_file()); } if (feros::$runtime) { loader::init('t_file')->delete(APP_RUNFILE); } if (loader::init('config')->log->write) { log::save(); } } } namespace base; class config extends common { static public $config = array(); public function __construct() { if (empty(self::$config) && is_file($this->run_file())) { self::$config = include $this->run_file(); } } public function set($name, $value) { self::$config[$name] = (object) $value; } public function __set($name, $value) { $this->set($name, $value); } public function __get($name) { return self::get($name); } public function __call($name, $value) { if (!empty($value[1])) self::$config[$name]->$value[0] = $value[1]; } public static function get($name) { if (!isset(self::$config[$name])) { $array = array(); foreach (self::get_dirs($name) as $value) { if (is_file($value)) $array = array_merge($array, (include $value)); } self::$config[$name] = (object) $array; } if (!is_object(self::$config[$name])) self::$config[$name] = (object) self::$config[$name]; if (isset(self::$config[$name])) return self::$config[$name]; throw new \Exception($this->language->config_not_exist); } private static function get_dirs($name) { return array(rtrim(FEROS_PATH, '\\/') . DS . 'config' . DS . $name . '.php', rtrim(APP_PATH, '\\/') . DS . 'config' . DS . $name . '.php'); } public function __destruct() { } public function run_file() { return rtrim(APP_RUNTIME, '\\/') . DS . 'config.php'; } } namespace base; class router extends common { private $controller, $method, $request_url = array(); public function init() { $url = trim($this->get_path_info(), '\\/'); if ($url === 'favicon.ico') { header('Content-Type:' . $this->t_mime->ico); exit(base64_decode($this->t_favicon->ico())); } if (!is_file($this->config->run_file())) $this->runtime->config(); if ($this->config->route->url_suffix) $url = preg_replace('/\.(' . trim($this->config->route->url_suffix, '.') . ')$/i', '', $url); $url = explode('/', $url); array_filter($url); $this->set_controller(array_shift($url)); $this->set_method(array_shift($url)); $this->set_request($url); $this->normalize(); if ($this->config->session->start) $this->session->init(); $this->exec(); } private function exec() { loader::init(('c_' . $this->fetch_controller()), ($this->fetch_method() . 'Action'), ((array) $this->fetch_request())) !== false? : $this->view->set_template_path(rtrim(FEROS_PATH, '\\/') . DS . 'view')->display('404'); } public function set_request($request) { $this->request_url = $request; } public function fetch_request() { return $this->request_url; } public function set_controller($controller = NULL) { $this->controller = preg_match('/^[A-Za-z](\w)*$/', $controller) ? $controller : $this->config->route->controller; } public function fetch_controller() { return $this->controller; } public function set_method($method = NULL) { $this->method = preg_match('/^[A-Za-z](\w)*$/', $method) ? $method : $this->config->route->method; } public function fetch_method() { return $this->method; } public function normalize() { if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) { if (isset($_GET)) $_GET = $this->stripslashes($_GET); if (isset($_POST)) $_POST = $this->stripslashes($_POST); if (isset($_REQUEST)) $_REQUEST = $this->stripslashes($_REQUEST); if (isset($_COOKIE)) $_COOKIE = $this->stripslashes($_COOKIE); } } private function stripslashes(&$data) { return is_array($data) ? array_map(array($this, 'stripslashes'), $data) : stripslashes($data); } public function get_script_path() { $filename = basename($_SERVER['SCRIPT_FILENAME']); if (basename($_SERVER['SCRIPT_NAME']) === $filename) { $base_script = $_SERVER['SCRIPT_NAME']; } elseif (basename($_SERVER['PHP_SELF']) === $filename) { $base_script = $_SERVER['PHP_SELF']; } elseif (isset($_SERVER['ORIG_SCRIPT_NAME']) && basename($_SERVER['ORIG_SCRIPT_NAME']) === $filename) { $base_script = $_SERVER['ORIG_SCRIPT_NAME']; } else { $path = $_SERVER['PHP_SELF']; $segs = explode('/', trim($_SERVER['SCRIPT_FILENAME'], '/')); $segs = array_reverse($segs); $index = 0; $last = count($segs); $base_script = ''; do { $seg = $segs[$index]; $base_script = '/' . $seg . $base_script; ++$index; } while (($last > $index) && (false !== ($pos = strpos($path, $base_script))) && (0 != $pos)); } return $base_script; } public function get_path_info() { static $path_info = null; if (empty($path_info)) { if (empty($_SERVER['PATH_INFO'])) { $strlen = strlen($this->get_script_path()); $totallen = strlen($_SERVER['PHP_SELF']); $path_info = substr($_SERVER['PHP_SELF'], $strlen, $totallen); } else { $path_info = $_SERVER['PATH_INFO']; } } return $path_info; } } namespace base; class log extends common { static $log = array(); public function write($log, $type = NULL) { self::$log[$type][] = $log; } public static function save() { if (loader::init('config')->log->write) { $tyle = explode(',',trim(str_replace(' ','',loader::init('config')->log->tyles))); if (!empty(self::$log)) { $driver = loader::init('d_log\\' . strtolower(\base\config::get('log')->driver))->init(); foreach (self::$log as $key => $value) { if (in_array($key, $tyle)) { foreach ($value as $val) { $driver->write($val, $key); } } } } } } public function sql($log) { $this->write($log, 'sql'); } public function error($log) { $this->write($log, 'error'); } public function notic($log) { $this->write($log, 'notic'); } public function info($log) { $this->write($log, 'info'); } }